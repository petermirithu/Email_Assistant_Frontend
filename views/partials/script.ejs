<script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
    crossorigin="anonymous"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    socket = io();

    socket.on('mail_box_total', (value) => {
        const item = document.getElementById("totalEmails");
        item.innerHTML = value;
    });

    socket.on('show_error', (value) => {
        alert(value);
    });

    socket.on('mail_connection_status', (value) => {
        const item = document.getElementById("mailConnectionStatus");
        item.classList.remove("bg-success");
        item.classList.remove("bg-info");
        item.classList.remove("bg-danger");
        if (value == "connected") {
            item.classList.add("bg-success");
            item.innerHTML = "Connected to Mail";
        }
        else if (value == "connecting") {
            item.classList.add("bg-info");
            item.innerHTML = "Connecting to Mail ...";
        }
        else {
            item.classList.add("bg-danger");
            item.innerHTML = "Disconnected from Mail";
        }
    });

    socket.on('display_task_completion_bar', (value) => {
        const progressBar = document.getElementById("progressBar");
        progressBar.style.width = `${value}%`;
    })

    socket.on('display_mails_tasks', (value) => {
        const inboxMails = document.getElementById("inboxMails");
        const taskList = document.getElementById("taskList");
        const inboxAttachments = document.getElementById("inboxAttachments");

        inboxMails.innerHTML = null;
        taskList.innerHTML = null;
        inboxAttachments.innerHTML = null;

        /**
         * *********** This is the Inbox mail Section
         */
        if (value?.emails?.length > 0) {
            document.getElementById("unReadEmails").innerHTML = value.emails.filter(x => x.read == false).length;

            document.getElementById("processedMails").innerHTML = value.emails.length;

            for (let email of value?.emails) {
                const card = `<div class="cardX ${(email.read==false)?"badgeUnread":""}" onclick="goToEmailDetailsSection('${email.id}')">
                                <div class="mailAvatar bg-info">
                                    <span class="text">${email.initials}</span>
                                </div>
                                <div class="mailBody">
                                    <p class="time">${email.timeAgo}</p>
                                    <p class="subject">${email.subject}</p>                                    
                                    <p class="from">From: ${email.from_email}</p>
                                </div>
                            </div>`
                inboxMails.innerHTML += card
            }
        }
        else {
            inboxMails.innerText = "No emails have been processed";
        }


        /**
         * *********** This is the Tasks Section
         */

        const progressBar = document.getElementById("progressBar");

        if (value?.tasks?.length == 0) {
            taskList.innerText = "You have no pending tasks";
            progressBar.style.width = "0%";
        }
        else {
            const totalTasks = value.tasks.length;
            const doneTasks = value.tasks.filter(x => x.done == true).length;

            progressBar.style.width = `${Math.floor((doneTasks / totalTasks) * 100)}%`;

            for (let task of value?.tasks) {
                let badge = null;

                if (task.category.toLowerCase() == "urgent") {
                    badge = `<span class="badge rounded-pill bg-red">${task.category}</span>`
                }
                else if (task.category.toLowerCase() == "deadline") {
                    badge = `<span class="badge rounded-pill bg-danger">${task.category}</span>`
                }
                else if (task.category.toLowerCase() == "critical") {
                    badge = `<span class="badge rounded-pill bg-purple">${task.category}</span>`
                }
                else if (task.category.toLowerCase() == "reminder") {
                    badge = `<span class="badge rounded-pill bg-orange">${task.category}</span>`
                }
                else {
                    badge = `<span class="badge rounded-pill bg-warning">${task.category}</span>`
                }

                const card = `<div class="taskCard bg-light">
                <div class="form-check">
                  <p class="timeAgo">${task.timeAgo}</p>
                  <input onclick="markTaskAsDone('${task.id}')" class="form-check-input" type="checkbox" id="flexCheckDefault" ${(task.done == true ? 'checked' : '')}>                
                  <label class="form-check-label">
                    ${badge} ${task.title}
                  </label>
                </div>                
              </div>`
                taskList.innerHTML += card;
            }
        }

        /**
         * *********** This is the Attachment Section
         */
        if (value?.attachments?.length > 0) {
            for (let attachment of value?.attachments) {
                const card = `<div class="cardX ${(attachment.read==false)?"badgeUnread":""}" onclick="goToEmailAttachmentSection('${attachment.id}')">                                
                                <div class="mailBody">                                    
                                    <p class="subject">${attachment.name}</p>                                    
                                </div>
                            </div>`
                inboxAttachments.innerHTML += card
            }
        }
        else {
            inboxAttachments.innerText = "No attachments have been processed";
        }
    });

    socket.on('display_mail_task', (value) => {
        document.getElementById("emailDetailId").innerHTML = value.email.id;

        document.getElementById("emailDetailMessageId").innerHTML = value.email.message_id;

        document.getElementById("emailDetailTitle").innerHTML = value.email.subject;

        document.getElementById("emailDetailFrom").innerHTML = value.email.from_email.replace("<", ":- ").replace(">", "");

        document.getElementById("emailDetailBody").innerHTML = value.email.body;

        const emailDetailTasks = document.getElementById("emailDetailTasks");
        emailDetailTasks.innerHTML = null;

        if (value?.tasks?.length > 0) {
            for (let task of value?.tasks) {
                const li = `<li>${task.category} - ${task.title}</li>`;
                emailDetailTasks.innerHTML += li;
            }
        }
        else {
            emailDetailTasks.innerHTML = "<li>No tasks/key points were generated</li>"
        }



        const emailAttachmentBtn = document.getElementById("emailAttachmentBtn");

        if (value.attachments?.length > 0) {
            emailAttachmentBtn.innerHTML = `<p><i>This email has an Attachment.</i></p>
            <button type="button" class="btn btn-outline-warning" onclick="goToEmailAttachmentSection('${value.attachments[0].id}')">Open Attachment</button>`
        }
        else {
            emailAttachmentBtn.innerHTML = null;
        }
    });

    socket.on('display_reply_suggestion', (value) => {
        document.getElementById("replyMailModalLabel").innerHTML = "Reply Suggestion";

        document.getElementById("emailBodyText").value = value;

        const emailDetailFrom = document.getElementById("emailDetailFrom");
        document.getElementById("emailReplyTo").value = emailDetailFrom.innerHTML.split(":- ")[1];
    });

    socket.on('display_mail_summary', (value) => {
        document.getElementById("mailSummarySection").innerHTML = value;
    });

    socket.on('mail_processed', (value) => {
        socket.emit("fetch_mails");
    });

    socket.on('display_attachment_task', (value) => {
        document.getElementById("attachmentDetailId").innerHTML = value.attachment.id;

        document.getElementById("attachmentDetailEmailId").innerHTML = value.email.id;

        document.getElementById("attachmentDetailTitle").innerHTML = value.attachment.name;

        document.getElementById("attachmentDetailFrom").innerHTML = value.email.from_email.replace("<", ":- ").replace(">", "");

        const attachmentDetailTasks = document.getElementById("attachmentDetailTasks");
        attachmentDetailTasks.innerHTML = null;

        if (value?.tasks?.length > 0) {
            for (let task of value?.tasks) {
                const li = `<li>${task.category} - ${task.title}</li>`;
                attachmentDetailTasks.innerHTML += li;
            }
        }
        else {
            attachmentDetailTasks.innerHTML = "<li>No tasks/key points were generated</li>"
        }

        var myState = {
            pdf: null,
            currentPage: 1,
            zoom: 0.85

        }

        pdfjsLib.getDocument(`attachments/${value.attachment.name}`).then((pdf) => {
            myState.pdf = pdf;
            render();
        });

        function render() {
            myState.pdf.getPage(myState.currentPage).then((page) => {

                var canvas = document.getElementById("pdf_renderer");
                var ctx = canvas.getContext('2d');

                var viewport = page.getViewport(myState.zoom);
                canvas.width = viewport.width;
                canvas.height = viewport.height;

                page.render({
                    canvasContext: ctx,
                    viewport: viewport
                });
            });
        }
    });

    socket.on('display_attachment_summary_reply', (value) => {
        const attachmentAIReponseModalLabel = document.getElementById("attachmentAIReponseModalLabel");
        if (value.option == "reply") {
            attachmentAIReponseModalLabel.innerHTML = "Attachment Reply Suggestion";
        }
        else {
            attachmentAIReponseModalLabel.innerHTML = "Attachment Summary";
        }
        document.getElementById("attachmentAIReponseSection").innerHTML = value.text;
    });    
</script>